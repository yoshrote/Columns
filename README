Columns
================================================================================================

Columns is a publishing platform with an HTML, JSON and ATOM interface.
The goal is to be a blogging platform that behaves very sociably.
The XML and JSON interfaces can be used as the backbone for a provisioning API to be used with 
external sites and applications.
3rd party authentication is supported by default.

A unique advantage of this platform is that because it is intended to be capable of communicating 
to other instances of itself it can be used as a client application as well.  This could create a 
social networking hub application run client-side. 


Development Features
================================================================================================

Columns aims to be a generic Atompub compliant server complete with:

- HTML admin interface
- HTML, JSON and ATOM formatted XML interfaces are all supported automatically
- Input validation
- a very flexible authorization framework capable of any range of complex security policies
- OpenID and OAuth support for 3rd party authentication with the ability to easy 
  add in any other kind of authentication method desired

Adding new atom entry types and categories is very easy.  Under typical use
the AtompubController class can be used to quickly create a controller for resources.

MongoDB is supported through MongoKit and SQL databases are supported through SQLAlchemy.
A base class has been written for SQLAlchemy models to emulate the MongoKit query methods.

When SQL databases are used, all input is sanitized to prevent SQL injections.


Goals
================================================================================================

Wouldn't it be cool if the CRUD of a resource tree could automatically be generated by an AtomPub 
service document. The environment and mapper would be configured based upon the contents of the 
service document. The authorization policy can also be defined via extension elements.

Defining the models is still a problem I'm not sure how to target.


Security
================================================================================================

*The goal is to create a platform that requests personal data explicitly and allows a user to control any data locally controlled.*

Sessions and Cookies
------------------------------------------------------------------------------------------------

A session is defined here as being the period after authenticating with the platform until it 
ends via **explicitly** logging out or expiring. When a session ends, all session data is removed 
from memory; none of the session data is stored persistently without **explicit** permission.

Server-side sessions are employed for this platform. First-party cookies contain a session identifier 
and all other data is stored in cache for the duration of the session.  This prevents the platform from 
transmitting any data that might otherwise have been in a plaintext cookie.  TLS such as SSH can be 
added for an extra layer of security of a session's data.

Examples of possible session data:

*  Social profile and social graph related data:

  *  This data may *only be requested with explicit permission of the authenticated user*
  *  This data may *only be requested if it is by an authenticated user*
  *  Examples: name, bio be information, age, gender, and other data which may be available via the 
   website in charge of this data

*  Local profile data:

  *  This data can *only be requested with explicit permission of the authenticated user*
  *  This data can *only be requested if it is by an authenticated user*

Persistent Data
------------------------------------------------------------------------------------------------

A few general statistics are stored for requests to particular pages within the platform. These are:

*  REMOTE_ADDR header
*  HTTP_REFERER header
*  REQUEST_METHOD header
*  REQUEST_URI header
*  a timestamp of the request
*  a reference to the function executed to generate the response

This is done with the intent to observe traffic patterns such as:

*  total pageviews
*  unique pageviews

Personal Identification Data
------------------------------------------------------------------------------------------------

Some personal identification data (PID) may be gathered during a session
